//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SamplePanoramaViewModel
{

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SamplePanoramaViewModel { }
#else

	public class SamplePanoramaViewModel : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SamplePanoramaViewModel()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/weave;component/SampleData/SamplePanoramaViewModel/SamplePanoramaViewModel.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Sources _Sources = new Sources();

		public Sources Sources
		{
			get
			{
				return this._Sources;
			}
		}

		private MostViewed _MostViewed = new MostViewed();

		public MostViewed MostViewed
		{
			get
			{
				return this._MostViewed;
			}
		}

		private Feeds _Feeds = new Feeds();

		public Feeds Feeds
		{
			get
			{
				return this._Feeds;
			}
		}
	}

	public class Sources : System.Collections.ObjectModel.ObservableCollection<SourcesItem>
	{ 
	}

	public class SourcesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _NewCount = string.Empty;

		public string NewCount
		{
			get
			{
				return this._NewCount;
			}

			set
			{
				if (this._NewCount != value)
				{
					this._NewCount = value;
					this.OnPropertyChanged("NewCount");
				}
			}
		}
	}

	public class MostViewed : System.Collections.ObjectModel.ObservableCollection<MostViewedItem>
	{ 
	}

	public class MostViewedItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _NewCount = string.Empty;

		public string NewCount
		{
			get
			{
				return this._NewCount;
			}

			set
			{
				if (this._NewCount != value)
				{
					this._NewCount = value;
					this.OnPropertyChanged("NewCount");
				}
			}
		}

		private string _Source = string.Empty;

		public string Source
		{
			get
			{
				return this._Source;
			}

			set
			{
				if (this._Source != value)
				{
					this._Source = value;
					this.OnPropertyChanged("Source");
				}
			}
		}
	}

	public class Feeds : System.Collections.ObjectModel.ObservableCollection<FeedsItem>
	{ 
	}

	public class FeedsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _TeaserImageUrl = string.Empty;

		public string TeaserImageUrl
		{
			get
			{
				return this._TeaserImageUrl;
			}

			set
			{
				if (this._TeaserImageUrl != value)
				{
					this._TeaserImageUrl = value;
					this.OnPropertyChanged("TeaserImageUrl");
				}
			}
		}
	}
#endif
}
