//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.SampleFeedSource
{

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class SampleFeedSource { }
#else

	public class SampleFeedSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public SampleFeedSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/Weave.UI.SettingsPages;component/SampleData/SampleFeedSource/SampleFeedSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private Feed _Feed = new Feed();

		public Feed Feed
		{
			get
			{
				return this._Feed;
			}

			set
			{
				if (this._Feed != value)
				{
					this._Feed = value;
					this.OnPropertyChanged("Feed");
				}
			}
		}

		private Categories1 _Categories = new Categories1();

		public Categories1 Categories
		{
			get
			{
				return this._Categories;
			}
		}

		private SelectedCategory _SelectedCategory = new SelectedCategory();

		public SelectedCategory SelectedCategory
		{
			get
			{
				return this._SelectedCategory;
			}

			set
			{
				if (this._SelectedCategory != value)
				{
					this._SelectedCategory = value;
					this.OnPropertyChanged("SelectedCategory");
				}
			}
		}

		private bool _IsArticleViewingSelectorEnabled = false;

		public bool IsArticleViewingSelectorEnabled
		{
			get
			{
				return this._IsArticleViewingSelectorEnabled;
			}

			set
			{
				if (this._IsArticleViewingSelectorEnabled != value)
				{
					this._IsArticleViewingSelectorEnabled = value;
					this.OnPropertyChanged("IsArticleViewingSelectorEnabled");
				}
			}
		}
	}

	public class Feed : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Category = string.Empty;

		public string Category
		{
			get
			{
				return this._Category;
			}

			set
			{
				if (this._Category != value)
				{
					this._Category = value;
					this.OnPropertyChanged("Category");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private string _Uri = string.Empty;

		public string Uri
		{
			get
			{
				return this._Uri;
			}

			set
			{
				if (this._Uri != value)
				{
					this._Uri = value;
					this.OnPropertyChanged("Uri");
				}
			}
		}
	}

	public class Categories1 : System.Collections.ObjectModel.ObservableCollection<CategoriesItem1>
	{ 
	}

	public class CategoriesItem1 : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _DisplayName = string.Empty;

		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}

			set
			{
				if (this._DisplayName != value)
				{
					this._DisplayName = value;
					this.OnPropertyChanged("DisplayName");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}

	public class SelectedCategory : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private string _DisplayName = string.Empty;

		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}

			set
			{
				if (this._DisplayName != value)
				{
					this._DisplayName = value;
					this.OnPropertyChanged("DisplayName");
				}
			}
		}

		private string _Name = string.Empty;

		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
	}
#endif
}
